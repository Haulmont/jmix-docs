## Execute 'authenticate.http' first to get have a valid access token for the API

# Query for Orders by Order Date

GET {{baseRestUrl}}
         /queries
         /rstex11_Order
         /ordersByDate?orderDate=2020-02-02
Authorization: Bearer {{access_token}}

> {%

    client.test("Response Code is 200", function() {
      client.assert(
          response.status === 200,
          "Response status is not 200 - OK"
      );
    });

    client.test("Entity List can be retrieved", function() {
      client.assert(
          response.body.length > 0,
          "Entity List does not contain multiple items"
      );
      client.assert(
          response.body[0]["_entityName"] === "rstex11_Order",
          "Entity List does not contain orders"
      );
      client.assert(
          response.body[0]["id"],
          "ID Attribute of an Entity is not returned"
      );
    });
  %}

###

# Query for Orders by Customer Name (GET)

GET {{baseRestUrl}}
         /queries
         /rstex11_Order
         /ordersByCustomerName?customerName=Shelby%20Robinson
Authorization: Bearer {{access_token}}

> {%

    client.test("Response Code is 200", function() {
      client.assert(
          response.status === 200,
          "Response status is not 200 - OK"
      );
    });

    client.test("Entity List can be retrieved", function() {
      client.assert(
          response.body.length > 0,
          "Entity List does not contain multiple items"
      );
      client.assert(
          response.body[0]["_entityName"] === "rstex11_Order",
          "Entity List does not contain orders"
      );
      client.assert(
          response.body[0]["id"],
          "ID Attribute of an Entity is not returned"
      );
    });
  %}

###

# Query for Orders by Customer Name (POST)

POST {{baseRestUrl}}
         /queries
         /rstex11_Order
         /ordersByCustomerName
Authorization: Bearer {{access_token}}

{
  "customerName": "Shelby Robinson"
}

###

# Query for Orders by ID (POST)

POST {{baseRestUrl}}
         /queries
         /rstex11_Order
         /ordersByIds
Authorization: Bearer {{access_token}}

{
  "ids": ["41aae331-b46b-85ee-b0bc-2de8cbf1ab86", "21021f78-edac-224b-e6f8-6e71e02a0f0d"]
}

> {%

    client.test("Response Code is 200", function() {
      client.assert(
          response.status === 200,
          "Response status is not 200 - OK"
      );
    });

    client.test("Entity List can be retrieved", function() {
      client.assert(
          response.body.length > 0,
          "Entity List does not contain multiple items"
      );
      client.assert(
          response.body[0]["_entityName"] === "rstex11_Order",
          "Entity List does not contain orders"
      );
      client.assert(
          response.body[0]["id"],
          "ID Attribute of an Entity is not returned"
      );
    });
  %}

###

# Query for Orders by Customer Name with total count in response headers

GET {{baseRestUrl}}
         /queries
         /rstex11_Order
         /ordersByCustomerName
         ?customerName=Shelby%20Robinson
         &returnCount=true
Authorization: Bearer {{access_token}}

> {%

    client.test("X-Total-Count header is present", function() {
      client.assert(
          response.headers.valueOf("X-Total-Count") === "1",
          "X-Total-Count is not present"
      );
    });
  %}

###

# Count for Orders by Customer Name

GET {{baseRestUrl}}
         /queries
         /rstex11_Order
         /ordersByCustomerName
         /count?customerName=Shelby%20Robinson
Authorization: Bearer {{access_token}}

> {%

    client.test("Response Code is 200", function() {
      client.assert(
          response.status === 200,
          "Response status is not 200 - OK"
      );
    });

    client.test("Query count can be retrieved", function() {
      client.assert(
          response.body === 1,
          "Entity List does not contain multiple " + response.body
      );
    });
  %}

###