## Execute 'authenticate.http' first to get have a valid access token for the API

# Search for Orders where the customers' name is Shelby Robinson via HTTP GET

GET {{baseRestUrl}}
         /entities
         /rstex11_Order
         /search?filter={"conditions":[{"property":"customer.name","operator":"contains","value":"Shelby"}]}
Authorization: Bearer {{access_token}}


> {%

    client.test("Response Code is 200", function() {
      client.assert(
          response.status === 200,
          "Response status is not 200 - OK"
      );
    });

    client.test("Entity List can be retrieved", function() {
      client.assert(
          response.body.length > 0,
          "Entity List does not contain multiple items"
      );
      client.assert(
          response.body[0]["_entityName"] === "rstex11_Order",
          "Entity List does not contain orders"
      );
      client.assert(
          response.body[0]["id"],
          "ID Attribute of an Entity is not returned"
      );
    });
  %}

###

# Search for Orders where the customers' name is Shelby Robinson via HTTP POST

POST {{baseRestUrl}}
         /entities
         /rstex11_Order
         /search
Authorization: Bearer {{access_token}}

{
  "filter": {
    "conditions": [
      {
        "property": "customer.name",
        "operator": "=",
        "value": "Shelby Robinson"
      }
    ]
  }
}

> {%

    client.test("Response Code is 200", function() {
      client.assert(
          response.status === 200,
          "Response status is not 200 - OK"
      );
    });

    client.test("Entity List can be retrieved", function() {
      client.assert(
          response.body.length > 0,
          "Entity List does not contain multiple items"
      );
      client.assert(
          response.body[0]["_entityName"] === "rstex11_Order",
          "Entity List does not contain orders"
      );
      client.assert(
          response.body[0]["id"],
          "ID Attribute of an Entity is not returned"
      );
    });
  %}
###

# Search for Orders where the customers' name is Shelby Robinson via HTTP POST

POST {{baseRestUrl}}
         /entities
         /rstex11_Order
         /search
Authorization: Bearer {{access_token}}

{
  "filter": {
    "conditions": [
      {
        "property": "customer.name",
        "operator": "=",
        "in": ["Shelby Robinson", "Randall Bishop"]
      }
    ]
  }
}

> {%

    client.test("Response Code is 200", function() {
      client.assert(
          response.status === 200,
          "Response status is not 200 - OK"
      );
    });

    client.test("Entity List can be retrieved", function() {
      client.assert(
          response.body.length > 0,
          "Entity List does not contain multiple items"
      );
      client.assert(
          response.body[0]["_entityName"] === "rstex11_Order",
          "Entity List does not contain orders"
      );
      client.assert(
          response.body[0]["id"],
          "ID Attribute of an Entity is not returned"
      );
    });
  %}

###

# Search for Orders with order date within 2020 via POST

POST {{baseRestUrl}}
         /entities
         /rstex11_Order
         /search?fetchPlan=order-with-details&filter=
Authorization: Bearer {{access_token}}

{
  "filter": {
    "conditions": [
      {
         "group": "AND",
         "conditions": [
           {
              "property": "date",
              "operator": ">=",
              "value": "2020-01-01"
           },
           {
              "property": "date",
              "operator": "<",
              "value": "2021-01-01"
           },
         ]
      }
    ]
  }
}

> {%

    client.test("Response Code is 200", function() {
      client.assert(
          response.status === 200,
          "Response status is not 200 - OK"
      );
    });

    client.test("Entity List can be retrieved", function() {
      client.assert(
          response.body.length > 0,
          "Entity List does not contain multiple items"
      );
      client.assert(
          response.body[0]["_entityName"] === "rstex11_Order",
          "Entity List does not contain orders"
      );
      client.assert(
          response.body[0]["id"],
          "ID Attribute of an Entity is not returned"
      );
    });
  %}