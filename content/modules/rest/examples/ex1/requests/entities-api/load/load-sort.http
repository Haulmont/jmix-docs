## Execute 'authenticate.http' first to get have a valid access token for the API

####################################################################################################
## Load Entity Instance List
####################################################################################################

# Sort Customers by name (ASC)

GET {{baseRestUrl}}
         /entities
         /rstex11_Customer?sort=name
Authorization: Bearer {{access_token}}

> {%

    client.test("Response Code is 200", function() {
      client.assert(
          response.status === 200,
          "Response status is not 200 - OK"
      );
    });

    client.test("Entity List can be retrieved", function() {
      client.assert(
          response.body.length > 0,
          "Entity List does not contain multiple items"
      );
      client.assert(
          response.body[0]["_entityName"] === "rstex11_Customer",
          "Entity List does not contain customers"
      );
      client.assert(
          response.body[0]["id"],
          "ID Attribute of an Entity is not returned"
      );
    });
  %}

###

# Sort orders 1. by date (ASC) and 2. by amount (DESC)

GET {{baseRestUrl}}
         /entities
         /rstex11_Order?sort=+date,-amount&limit=10
Authorization: Bearer {{access_token}}

> {%

    client.test("Response Code is 200", function() {
      client.assert(
          response.status === 200,
          "Response status is not 200 - OK"
      );
    });

    client.test("Entity List can be retrieved", function() {
      client.assert(
          response.body.length > 0,
          "Entity List does not contain multiple items"
      );
      client.assert(
          response.body[0]["_entityName"] === "rstex11_Order",
          "Entity List does not contain orders"
      );
      client.assert(
          response.body[0]["id"],
          "ID Attribute of an Entity is not returned"
      );
    });
  %}