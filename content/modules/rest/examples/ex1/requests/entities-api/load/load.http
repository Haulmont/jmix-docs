## Execute 'authenticate.http' first to get have a valid access token for the API

####################################################################################################
## Load Entity Instance List
####################################################################################################

# Load all Customers

GET {{baseRestUrl}}
         /entities
         /rstex11_Customer
Authorization: Bearer {{access_token}}

> {%

    client.test("Response Code is 200", function() {
      client.assert(
          response.status === 200,
          "Response status is not 200 - OK"
      );
    });

    client.test("Entity List can be retrieved", function() {
      client.assert(
          response.body.length > 0,
          "Entity List does not contain multiple items"
      );
      client.assert(
          response.body[0]["_entityName"] === "rstex11_Customer",
          "Entity List does not contain customers"
      );
      client.assert(
          response.body[0]["id"],
          "ID Attribute of an Entity is not returned"
      );
    });
  %}

###

# Load five order entities with ascending sorting by amount attribute

GET {{baseRestUrl}}
         /entities
         /rstex11_Order?fetchPlan=order-with-details&sort=+amount
Authorization: Bearer {{access_token}}

> {%

    client.test("Response Code is 200", function() {
      client.assert(
          response.status === 200,
          "Response status is not 200 - OK"
      );
    });

    client.test("Entity List can be retrieved", function() {
      client.assert(
          response.body.length > 0,
          "Entity List does not contain multiple items"
      );
      client.assert(
          response.body[0]["_entityName"] === "rstex11_Order",
          "Entity List does not contain orders"
      );
      client.assert(
          response.body[0]["id"],
          "ID Attribute of an Entity is not returned"
      );
    });
  %}

###

## Load a single Order by its ID

GET {{baseRestUrl}}
         /entities
         /rstex11_Order
         /41aae331-b46b-85ee-b0bc-2de8cbf1ab86?fetchPlan=order-with-details
Authorization: Bearer {{access_token}}

> {%

    client.test("Response Code is 200", function() {
      client.assert(
          response.status === 200,
          "Response status is not 200 - OK"
      );
    });

    client.test("Entity is an Order", function() {
      client.assert(
          response.body["_entityName"] === "rstex11_Order",
          "Entity is not an order"
      );
      client.assert(
          response.body["id"] === "41aae331-b46b-85ee-b0bc-2de8cbf1ab86",
          "ID Attribute of an Entity is not returned"
      );
    });

  %}

###

## Load a single Order by its ID with requesting particular attributes

GET {{baseRestUrl}}
         /entities
         /rstex11_Order
         /21021f28-edac-224b-e6f8-6e71e02a0f0d?fetchPlan=order-with-details
Authorization: Bearer {{access_token}}

> {%

    client.test("Response Code is 200", function() {
      client.assert(
          response.status === 200,
          "Response status is not 200 - OK"
      );
    });

    client.test("Entity can be retrieved", function() {
      client.assert(
          response.body["_entityName"] === "rstex11_Order",
          "Entity List does not contain orders"
      );
      client.assert(
          response.body["id"] === "21021f78-edac-224b-e6f8-6e71e02a0f0d",
          "ID Attribute of an Entity is not returned"
      );
    });
  %}

###


POST {{baseRestUrl}}
         /entities
         /rstex11_Order
         /search?fetchPlan=order-with-details
Authorization: Bearer {{access_token}}

{
  "filter": {
    "conditions": [
      {
        "property": "customer.name",
        "operator": "=",
        "value": "Shelby Robinson"
      }
    ]
  }
}

> {%

    client.test("Response Code is 200", function() {
      client.assert(
          response.status === 200,
          "Response status is not 200 - OK"
      );
    });

    client.test("Entity List can be retrieved", function() {
      client.assert(
          response.body.length > 0,
          "Entity List does not contain multiple items"
      );
      client.assert(
          response.body[0]["_entityName"] === "rstex11_Order",
          "Entity List does not contain orders"
      );
      client.assert(
          response.body[0]["id"],
          "ID Attribute of an Entity is not returned"
      );
    });
  %}



