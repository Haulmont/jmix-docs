## Execute 'authenticate.http' first to get have a valid access token for the API

# Create multiple Customers

POST {{baseRestUrl}}
         /entities
         /rstex11_Customer
Authorization: Bearer {{access_token}}

[
  {
    "name": "Randall Bishop TEST 1"
  },
  {
    "name": null
  },
  {
    "name": "Randall Bishop TEST 3"
  }
]


> {%
    client.test("Response Code is 400", function() {
      client.assert(
          response.status === 400,
          "Response status is not 400 - Bad Request"
      );
    });
  %}

###

# Find Randall Bishop TEST 1 --> found

POST {{baseRestUrl}}
         /entities
         /rstex11_Customer
         /search
Authorization: Bearer {{access_token}}

{
  "filter": {
    "conditions": [
      {
        "property": "name",
        "operator": "=",
        "value": "Randall Bishop TEST 1"
      }
    ]
  }
}

> {%

    client.test("Response Code is 200", function() {
      client.assert(
          response.status === 200,
          "Response status is not 200 - OK"
      );
    });

    client.test("Entity List can be retrieved", function() {
      client.assert(
          response.body.length > 0,
          "Entity List does not contain any items"
      );
      client.assert(
          response.body[0]["name"] === "Randall Bishop TEST 1",
          "Name Attribute of Customer is not valid"
      );
    });
  %}

###

# Find Randall Bishop TEST 3 --> not found

POST {{baseRestUrl}}
         /entities
         /rstex11_Customer
         /search
Authorization: Bearer {{access_token}}

{
  "filter": {
    "conditions": [
      {
        "property": "name",
        "operator": "=",
        "value": "Randall Bishop TEST 3"
      }
    ]
  }
}

> {%

    client.test("Response Code is 200", function() {
      client.assert(
          response.status === 200,
          "Response status is not 200 - OK"
      );
    });

    client.test("Entity List can be retrieved", function() {
      client.assert(
          response.body.length > 0,
          "Entity List does not contain any items"
      );
      client.assert(
          response.body[0]["name"] === "Randall Bishop TEST 3",
          "Name Attribute of Customer is not valid"
      );
    });
  %}
