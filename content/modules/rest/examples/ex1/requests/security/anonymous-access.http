## Execute 'authenticate.http' first to get have a valid access token for the API

# Get metadata of Order entity

GET {{baseRestUrl}}
         /services
         /sample_ProductService
         /getProductInformation
         ?productId=123
#Authorization: Bearer {{access_token}}

> {%
    client.test("Response Code is 200", function() {
      client.assert(
          response.status === 200,
          "Response status is not 200 - OK"
      );
    });

    client.test("entity introspection for Order is present", function() {
      client.assert(
          response.body.entityName === "rstex11_Order"
      );
    });
  %}

###

GET {{baseRestUrl}}
         /metadata
         /entities
         /rstex11_Order
         /fetchPlans
Authorization: Bearer {{access_token}}

> {%
    client.test("Response Code is 200", function() {
      client.assert(
          response.status === 200,
          "Response status is not 200 - OK"
      );
    });

    client.test("entity introspection for Order is present", function() {
      client.assert(
          response.body[0].entity === "rstex11_Order",
          "Fetch Plan is not for Order"
      );

      client.assert(
          response.body[0].name === "order-with-details",
          "Fetch Plan order-with-details not found"
      );
    });
  %}
###

GET {{baseRestUrl}}
         /metadata
         /enums
         /rest.sample.entity.CustomerType
Authorization: Bearer {{access_token}}

> {%
    client.test("Response Code is 200", function() {
      client.assert(
          response.status === 200,
          "Response status is not 200 - OK"
      );
    });

    client.test("entity introspection for Order is present", function() {
      client.assert(
          response.body[0].entity === "rstex11_Order",
          "Fetch Plan is not for Order"
      );

      client.assert(
          response.body[0].name === "order-with-details",
          "Fetch Plan order-with-details not found"
      );
    });
  %}